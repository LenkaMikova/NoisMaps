---
title: "DP_hluk_03 - model RF"
author: "Lenka Miková"
format: html
editor: visual
jupyter: python3
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
if (!require(patchwork)) install.packages("patchwork")
if (!require(purrr)) install.packages("purrr")
if (!require(ggplot2)) install.packages("ggplot2")
if (!require(corrplot)) install.packages("corrplot")
if (!require(randomForest)) install.packages("randomForest")
if (!require(car)) install.packages("car")
if (!require(ranger)) install.packages("ranger")

library(data.table)
library(ggplot2)
library(patchwork)
library(purrr)
library(corrplot)
library(randomForest)
library(car)
library(ranger)
```

# Vstupní data

## Načtení dat

```{r data-loading}
setwd("E:/Skola/+M-PVZP/+DP/model/DP_hluk")
input_dir <- "F:/Skola/+M-PVZP/+DP/model/DP_hluk"
dtaM <- fread("dta_noOut.csv")
```

```{r}
head(dtaM)
```


## Selekce dat

```{r}
#removed_variables <- c("noiseLevel", "sourceLDEN", "ID")
selected_variables <- c("L8_NDVI_Max", "S2_ISA", "VIIRS","LDEN")
#dtaM <- dtaM[, !removed_variables, with = FALSE]
dtaM <- dtaM[, ..selected_variables]
dtaM[, LDEN := as.factor(LDEN)]
head(dtaM)
```


## Rozdělení dat

```{r data-loading}
set.seed(123)
n <- nrow(dtaM)
train_index <- sample(1:n, 0.7 * n)  # 70 % train data
remaining_index <- setdiff(1:n, train_index)
valid_index <- sample(remaining_index, 0.5 * length(remaining_index))  # 15 % valid data
test_index <- setdiff(remaining_index, valid_index)  # 15 % test data

train_data <- dtaM[train_index]
valid_data <- dtaM[valid_index]
test_data <- dtaM[test_index]
```

Z důvodu nerovnoměrného zastoupení ve všech kategoriích byla data vyvážena

```{r}
str(train_data)  # Zkontroluj, zda LDEN je faktor a data mají správný formát
table(train_data$LDEN)  # Ověř počet vzorků v každé kategorii
train_data <- na.omit(train_data)

```

## Vyvážení tříd v datech

```{r}
if (!require(smotefamily)) install.packages("smotefamily")
library(smotefamily)

train_data$LDEN <- as.factor(train_data$LDEN)

# Oddělení nezávislých proměnných (X) a cílové proměnné (target)
X <- train_data[, !names(train_data) %in% "LDEN", with = FALSE]
target <- train_data$LDEN

smote_data <- SMOTE(X, target, K = 5, dup_size = 5)

# Konverze výstupu na data.table a přejmenování
balanced_data <- as.data.table(smote_data$data)
names(balanced_data)[ncol(balanced_data)] <- "LDEN"

# Konverze LDEN zpět na faktor
balanced_data$LDEN <- as.factor(balanced_data$LDEN)

# Kontrola vyváženosti tříd po SMOTE
table(balanced_data$LDEN)

```
# Model

## Trénink modelu RF (před sloučením kategorií)

```{r rf-model-training}
# Def RF model
rf_model <- randomForest(
  LDEN ~ ., 
  data = balanced_data, 
  mtry = 3,
  ntree = 300, 
  nodesize = 15, 
  importance = TRUE, 
  na.action = na.omit
)

print(rf_model)
varImpPlot(rf_model)
```

```{r}
# Sloucení kategorií 70 dB až 90 dB do jedné
library(dplyr)

balanced_data <- balanced_data %>%
  mutate(LDEN = recode(LDEN, 
                       "70" = "70+", 
                       "75" = "70+", 
                       "80" = "70+", 
                       "85" = "70+", 
                       "90" = "70+"))

# Ověření distribuce tříd po sloučení
table(balanced_data$LDEN)

```

## Trénink modelu RF (po sloučení kategorií)

```{r}
rf_model <- randomForest(
  LDEN ~ ., 
  data = balanced_data, 
  mtry = 3,
  ntree = 500, 
  nodesize = 15, 
  importance = TRUE, 
  na.action = na.omit
)

print(rf_model)
varImpPlot(rf_model)
```


# Vyhodnocení modelu

```{r model-evaluation}
# predikce test data
predicted <- predict(rf_model, test_data)
actual <- as.numeric(test_data$LDEN)

# predikce train data
train_predicted <- predict(rf_model, train_data)
train_actual <- as.numeric(train_data$LDEN)

# prevod na number
train_predicted <- as.numeric(train_predicted)
train_actual <- as.numeric(train_actual)
predicted <- as.numeric(predicted)
actual <- as.numeric(actual)
valid_predicted <- as.numeric(valid_predicted)
valid_actual <- as.numeric(valid_actual)

# vypocet metrik
train_rmse <- sqrt(mean((train_predicted - train_actual)^2))
train_mae <- mean(abs(train_predicted - train_actual))
train_rsq <- cor(train_predicted, train_actual)^2

cat("RMSE on Training Data:", train_rmse, "\n")
cat("MAE on Training Data:", train_mae, "\n")
cat("R-squared on Training Data:", train_rsq, "\n")

rmse <- sqrt(mean((predicted - actual)^2))   # Penalizuje velke chyby vice nez male
mae <- mean(abs(predicted - actual)) # Jednoduse meri prumer absolutni chyby
rsq <- cor(predicted, actual)^2    # Udava kolik variability promenné LDE je vysvetleno 

cat("RMSE on Test Data:", rmse, "\n")
cat("MAE on Test Data:", mae, "\n")
cat("R-squared on Test Data:", rsq, "\n")

valid_predicted <- as.numeric(predict(rf_model, valid_data))
valid_actual <- as.numeric(valid_data$LDEN)

valid_rmse <- sqrt(mean((valid_predicted - valid_actual)^2)) 
valid_mae <- mean(abs(valid_predicted - valid_actual)) 
valid_rsq <- cor(valid_predicted, valid_actual)^2

cat("RMSE on Validation Data:", valid_rmse, "\n")
cat("MAE on Validation Data:", valid_mae, "\n")
cat("R-squared on Validation Data:", valid_rsq, "\n")
```
